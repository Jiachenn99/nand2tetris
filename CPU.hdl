// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Implement the CPU based on its following functionalities
    // Instruction decode
   
    Not(in= instruction[15], out= aInst);
    Not(in = aInst, out = cInst);

    // A register and input mux
    And(a= cInst, b= instruction[5], out= ALUtoA);
    Mux16(a= instruction, b= aluOut, sel= ALUtoA, out= regAin);

    Or(a= aInst, b= ALUtoA, out= regAload);
    ARegister(in= regAin, load= regAload, out= outA);

    Mux16(a= outA, b= inM, sel= instruction[12], out= AMout);

    // D register
    And(a = cInst, b = instruction[4], out = loadD);
    DRegister(in=aluOut, load= loadD, out=outD);

    // ALU and input mux
    ALU(x= outD, y= AMout, zx = instruction[11], nx= instruction[10], 
        zy= instruction[9], ny= instruction[8], f= instruction[7], 
        no=instruction[6], out= aluOut, zr= zrOut, ng= ngOut);

    //write to memory
    Or16(a=false, b=outA, out[0..14]=addressM);
    Or16(a=false, b=aluOut, out=outM);
    And(a= cInst, b= instruction[3], out= writeM);

    // PC with jump test
    //Program Counter
    And(a = zrOut , b = instruction[1], out= JEQ); //Equal
    And(a= ngOut, b= instruction[2], out= JLT); //Less than
    Or(a= zrOut, b= ngOut, out= zrOrng);
    Not(in= zrOrng, out= positive);
    And(a= positive, b= instruction[0], out= JGT);

    //Combining both inputs
    Or(a= JEQ, b= JLT, out= JLE); //Less than or equal to
    Or(a=JLE, b = JGT, out= jmp);   
    And(a= jmp, b= cInst, out= toPC);
    Not(in= toPC, out= PCinc);
    PC(in= outA, load= toPC,  inc= PCinc, reset= reset, out[0..14]=pc);
}
